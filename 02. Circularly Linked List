#include<iostream>
using namespace std;

class Node{
public:
    int data;
    Node* next;

    Node(int d){
    this-> data= d;
    this->next =  NULL;
    }

    ~Node(){

    int value =  this->data;
    if(this-> data != NULL){
        delete next;
        next = NULL;
    }
    cout<<"memory is free for node with value "<<value<<endl;
  }
};


void insertathead(Node* &tail, int element, int d){
    if(tail == NULL){
        Node* newnode = new Node(d);
        tail = newnode;
        newnode->next = newnode;
    }
    else{
        Node* curr = tail;
        while(curr->data != element){
            curr = curr->next;
        }
        Node* temp = new Node(d);
        temp->next = curr-> next;
        curr->next = temp;
    }
}

void deleteNode(Node* &tail, int value) {

    //empty list
    if(tail == NULL) {
        cout << " List is empty, please check again " << endl;
        return;
    }
    else{

        Node* prev = tail;
        Node* curr = prev -> next;

        while(curr -> data != value) {
            prev = curr;
            curr = curr -> next;
        }

        prev -> next = curr -> next;

        if(curr == prev) {
            tail = NULL;
        }
        else if(tail == curr ) {
            tail = prev;
        }

        curr -> next = NULL;
        delete curr;

    }

}


void print(Node* tail){
    Node* temp = tail;
    if(tail == NULL){
        cout<<"The list is empty "<<endl;
        return;
    }
    do{
        cout<<tail-> data<<" ";
        tail = tail-> next;

    }while(tail != temp);
    cout<<endl;
}

int main(){


    Node* tail = NULL;

    insertathead(tail,5, 3);
    print(tail);



    insertathead(tail,3, 5);
    print(tail);

    insertathead(tail,5, 9);
    print(tail);

    insertathead(tail,5, 7);
    print(tail);

    deleteNode(tail, 3);
    print(tail);

    return 0;
}
